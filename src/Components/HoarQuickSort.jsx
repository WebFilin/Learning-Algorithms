import React from "react";

function HoarQuickSort(props) {
  // быстрая сортировка (Quick Sort) или сортировка Хоара

  // Алгоритм типа «разделяй и властвуй» (англ. divide and conquer) — это парадигма разработки алгоритмов, заключающаяся в рекурсивном разбиении решаемой задачи на две или более подзадачи того же типа, но меньшего размера, и комбинировании их решений для получения ответа к исходной задаче. Разбиения выполняются до тех пор, пока все подзадачи не окажутся элементарными.

  // 1. Выбираем элемент из массива и считаем его опорным (в англоязычной литературе его называют pivot).

  // 2. Сортируем элементы в массиве таким образом, чтобы элементы меньше опорного размещались в подмассиве перед ним, а большие или равные — в подмассиве после.

  // 3. Рекурсивно применяем первые два шага к двум подмассивам слева и справа от опорного элемента. Т.е. дробим наш массив на подмассивы и сортируем их относительно опорного элемента, пока в этих подмассивах не останется по одному элементу или меньше. Рекурсия не применяется к массиву, в котором только один элемент или отсутствуют элементы. Это как раз и будет базовым условием, при котором мы прервем рекурсию.

  const arr = [-5, 23, 7, 5, 3, -12, -29, 21, 54, 35, 0];

  function quickSort(arr) {
    //  База рекрусии
    if (arr.length <= 1) {
      return arr;
    }
    // Индекс опорного элемента в массиве
    let pivotIndex = Math.floor(arr.length / 2);

    // Опорный элемент
    let pivot = arr[pivotIndex];

    // Сюда положим все элементы меньше опорного
    let less = [];

    // Сюда положим все элементы больше опорного
    let greater = [];

    for (let i = 0; i < arr.length; i++) {
      // Пропускаем итерацию, если индекс текущей итерации совпадает с индексом опорного элемента
      if (i === pivotIndex) continue;

      // Если опорный элемент больше элемента в массиве, добавляем этот элемент в массив less
      if (arr[i] < pivot) {
        less.push(arr[i]);
      }

      // Иначе добавляем его в массив greater
      else {
        greater.push(arr[i]);
      }
    }
    // Рекурсивно вызываем функцию quickSort, передаем туда наши
    // массивы и разворачиваем результат в возвращаемый массив,
    // не забывая вставлять посередине опорный элемент
    return [...quickSort(less), pivot, ...quickSort(greater)];
  }

  //   console.log(quickSort(arr));

  return <div></div>;
}

export default HoarQuickSort;
